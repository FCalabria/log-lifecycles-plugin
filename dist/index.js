const config={beforeCreate:{msg:"is about to be created",color:"#04B431"},created:{msg:"was created",color:"#04B431"},beforeMount:{msg:"is about to be mounted",color:"#58ACFA"},mounted:{msg:"was mounted",color:"#58ACFA"},beforeUpdate:{msg:"is about to be updated",color:"#DBA901"},updated:{msg:"was updated",color:"#DBA901"},activated:{msg:"was activated",color:"#0101DF"},deactivated:{msg:"was deactivated",color:"#B404AE"},beforeDestroy:{msg:"is about to be destroyed",color:"#800000"},destroyed:{msg:"was destroyed",color:"#800000"},errorCaptured:{msg:"error",color:"#e60000"}};function throwError(a){throw new Error(`LogLifecycles plugin error: ${a}`)}function filterLifecycles(a){return!!config.hasOwnProperty(a)||void console.log(`LogLifecycles plugin: ${a} is not a valid lifecycle`)}export default{install:(a,{lifecycles:b=[]}={})=>{function c(a,b){const c=config[b];console.log(`%c ${a} ${c.msg}`,`color:${c.color}`)}if("production"===process.env.NODE_ENV)return;Array.isArray(b)||throwError("lifecycles option must be an array");const d={},e=0===b.length?Object.keys(config):b.filter(filterLifecycles);e.forEach(a=>{d[a]=function(){c(this.$options.name,a)}}),a.mixin(d)}};
